buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
  }

  dependencies {
    classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.1.3.RELEASE'
  }
}

plugins {
  id 'java'
  id 'net.minecrell.licenser' version '0.3'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'

group 'net.kyori'
version '1.0.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
  options.compilerArgs += ['-Xlint:all', '-Xlint:-path', '-parameters']
  options.deprecation = true
  options.encoding = 'UTF-8'
}

test {
  useJUnitPlatform()
}

license {
  header project.file('header.txt')
  include '**/*.java'
  newLine false
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url 'https://oss.sonatype.org/content/groups/public/'
  }
}

dependencies {
  compile 'com.google.guava:guava:23.6-jre'
  compile 'com.google.http-client:google-http-client:1.28.0'
  compile 'com.google.http-client:google-http-client-apache:1.28.0'
  compile 'joda-time:joda-time:2.10.5'
  compile 'net.kyori:event-api:3.0.0'
  compile 'net.kyori:event-method-asm:3.0.0'
  compile 'net.kyori:fragment:1.0.1-SNAPSHOT'
  compile 'net.kyori:igloo:1.0.1-SNAPSHOT'
  compile 'net.kyori:lunar:1.0.7-SNAPSHOT'
  compile 'net.kyori:membrane:1.1.0-SNAPSHOT'
  compile 'net.kyori:mu:1.0.0-SNAPSHOT'
  compile 'net.kyori:polar:1.0.1-SNAPSHOT'
  compile 'net.kyori:violet:2.0.0-SNAPSHOT'
  compile 'net.kyori:xml:1.0.0'
  compile 'net.time4j:time4j-core:4.38'
  compile 'org.apache.commons:commons-text:1.2'
  compileOnly 'org.springframework.boot:spring-boot-configuration-processor'
  compile 'org.springframework.boot:spring-boot-starter-undertow'
  compile('org.springframework.boot:spring-boot-starter-web') {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
  }
  compile 'org.springframework.guice:spring-guice:1.1.2.RELEASE' // NB: cannot go to 1.1.3
  testCompile 'org.junit.jupiter:junit-jupiter-api:5.2.0'
  testCompile 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
}

bootJar {
  manifest.attributes(
    'Implementation-Version': project.version + getGitHash()
  )
}

def getGitHash() {
  def process = 'git rev-parse --short HEAD'.execute(null as String[], projectDir)
  process.waitFor()
  return '-' + (process.exitValue() ? 'unknown' : process.text.trim())
}
